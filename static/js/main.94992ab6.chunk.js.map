{"version":3,"sources":["form/form.js","list/list.js","settings/settings.js","details/details.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","inputValue","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","handleAddCity","console","log","alert","react_default","a","createElement","className","onSubmit","this","type","onChange","placeholder","Component","List","tableHeader","temp","_this2","data","temps","tempAvg","weather","length","map","item","index","key","city","id","react_router_dom","to","concat","name","list","forEach","push","main","x","i","arr","reduce","b","toFixed","deg","onClick","handleRemoveCity","handleAvg","Fragment","Settings","selectedOption","radioChange","currentTarget","handleDeg","checked","Details","cityData","filter","parseInt","match","params","lat","coord","lon","App","cities","degFlag","getLocalStorage","savedCity","localStorage","getItem","JSON","parse","setLocalStorage","setItem","stringify","rewriteArrayCities","newCityName","cityName","_this$state","Promise","all","fetch","then","response","ok","json","Error","catch","error","_this3","react_router","path","component","settings_settings","changeDeg","exact","src_form_form","list_list","details_details","Object","assign","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","basename","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.94992ab6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './form.css';\r\n\r\n\r\nclass Form extends Component {\r\n\r\n    state = {\r\n        inputValue: '',\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ inputValue: e.target.value });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.inputValue) {\r\n            this.props.handleAddCity(this.state.inputValue);\r\n        } else {\r\n            console.log(\"Podaj nazwę miasta\");\r\n            alert(\"Podaj nazwę miasta\");\r\n        }\r\n\r\n        this.setState({ inputValue: '' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder=\"Nazwa miasta...\" />\r\n                    <input type=\"submit\" value=\"Dodaj\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form\r\n\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './list.css';\r\n\r\nclass List extends Component {\r\n\r\n    tableHeader = () => {\r\n        return (\r\n            <div className=\"cityListHeader\">\r\n                <div>#</div>\r\n                <div>Miasto</div>\r\n                <div>Średnia prognozowana temperatura</div>\r\n                <div></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let data = [];\r\n        let temps = [];\r\n        let temp;\r\n        let tempAvg = [];\r\n\r\n        if (this.props.weather.length) {\r\n            data = this.props.weather.map((item, index) => (\r\n\r\n                <div className=\"cityList\" key={item.city.id}>\r\n                    <div>{index + 1}</div>\r\n                    <div className=\"cityLink\">\r\n                        <Link to={`/city/${item.city.id}`}>\r\n                            {item.city.name}\r\n                        </Link>\r\n                    </div>\r\n                    {item.list.forEach(item => temps.push(item.main.temp))}\r\n                    <div>\r\n                        {temp = (temps.map((x, i, arr) => x / arr.length).reduce((a, b) => a + b)).toFixed(1)}\r\n                        {tempAvg.push({ \"id\": item.city.id, \"temp\": temp })}\r\n                        {this.props.deg === 'metric' ? ' \\u00B0C' : ' \\u00B0F'}\r\n                    </div>\r\n                    <div><button onClick={() => this.props.handleRemoveCity(item.city.id)}>Usuń</button></div>\r\n                    <div>{temps.length = 0}</div>\r\n\r\n                </div>\r\n            ))\r\n        };\r\n        this.props.handleAvg(tempAvg);\r\n        return (\r\n            <>\r\n                {this.props.weather.length ? this.tableHeader() : ''}\r\n                {/* {this.tableHeader()} */}\r\n                {data}\r\n            </>\r\n\r\n\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './settings.css';\r\n\r\nclass Settings extends Component {\r\n\r\n    state = {\r\n        selectedOption: this.props.deg\r\n    }\r\n\r\n\r\n    radioChange = (e) => {\r\n        this.setState({\r\n            selectedOption: e.currentTarget.value\r\n        });\r\n        this.props.handleDeg(e.currentTarget.value)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"set\">\r\n                <div className=\"setName\">Ustawienia</div>\r\n                <div className=\"radioButtonContainer\">\r\n                    <div>Jednostka:</div>\r\n                    <div>\r\n                        <label>\r\n                            <input type=\"radio\"\r\n                                value=\"metric\"\r\n                                checked={this.state.selectedOption === \"metric\"}\r\n                                onChange={this.radioChange} />\r\n                            &#176;C\r\n                    </label>\r\n\r\n                        <label>\r\n                            <input type=\"radio\"\r\n                                value=\"imperial\"\r\n                                checked={this.state.selectedOption === \"imperial\"}\r\n                                onChange={this.radioChange} />\r\n                            &#176;F\r\n                    </label>\r\n                    </div>\r\n                </div>\r\n                {/* <h3>{this.state.selectedOption}</h3> */}\r\n                <div className=\"back\">\r\n                    <Link to=\"/\">\r\n                        Powrót\r\n                </Link>\r\n                </div>\r\n\r\n                {/* </form> */}\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './details.css';\r\n\r\nclass Details extends Component {\r\n\r\n    render() {\r\n        let city;\r\n        let cityData = {};\r\n        let temp;\r\n\r\n        if (this.props.weather) {\r\n            city = this.props.weather.filter(item => item.city.id === parseInt(this.props.match.params.id));\r\n            temp = this.props.tempAvg.filter(item => item.id === parseInt(this.props.match.params.id));\r\n\r\n            cityData = {\r\n                name: city.map(item => item.city.name),\r\n                lat: city.map(item => item.city.coord.lat),\r\n                lon: city.map(item => item.city.coord.lon),\r\n                temp: temp.map(item => item.temp)\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"cityName\">\r\n                    {cityData.name}\r\n                </div>\r\n                <div className=\"detailsContainer\">\r\n                    <div>\r\n                        <div>\r\n                            szerokość geograficzna:\r\n                        </div>\r\n                        <div>\r\n                            {cityData.lat}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            długość geograficzna:\r\n                        </div>\r\n                        <div>\r\n                            {cityData.lon}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            średnia temperatura\r\n                        </div>\r\n                        <div>\r\n                            {cityData.lon}\r\n                            {this.props.deg === 'metric' ? ' \\u00B0C' : ' \\u00B0F'}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"back\">\r\n                    <Link to=\"/\">\r\n                        Powrót\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Details","import React, { Component } from 'react';\nimport Form from './form/form';\nimport List from './list/list';\nimport Settings from './settings/settings'\nimport Details from './details/details';\nimport { Route, Link } from 'react-router-dom'\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    weather: [],\n    cities: [],\n    deg: \"metric\",\n    degFlag: false,\n  }\n\n  tempAvg = [];\n\n  //pobranie zapisanych w storage miast, o ile istnieją\n  componentDidMount() {\n    this.getLocalStorage();\n  }\n\n  //pobranie danych pogodowych przy kazdorazowym dodaniu miasta lub zmianie jednostki wyswietlania temperatury\n  componentDidUpdate() {\n\n    const { weather, cities } = this.state;\n\n    if ((cities.length > weather.length) || this.state.degFlag) {\n\n      Promise.all(this.state.cities.map(city =>\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city},PL&units=${this.state.deg}&APPID=96993feca341f53ea0847433eae53af5`)\n          .then(response => {\n            if (response.ok) {\n              return response.json();\n            }\n            else\n              throw new Error('Podałeś złą nazwę miasta lub nie mogę się połączyć z API !!!!!!!!!!!!!');\n          })\n      ))\n        .then(weather => {\n          this.setState({\n            weather,\n            degFlag: false\n          }, () => {\n            this.rewriteArrayCities();\n            this.setLocalStorage();\n          })\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }\n  // aby nie renderowac w nieskonczonosc (wywolywac componentDidUpdate()) zapis sredniej temp. do osobnej zmiennej\n  handleAvg = (tempAvg) => {\n    this.tempAvg = tempAvg;\n  }\n\n  //pobranie miast z local storaage i zapisanie je do stanu\n  getLocalStorage = () => {\n    let savedCity = localStorage.getItem(\"storageCity\");\n    let cities;\n\n    if (savedCity) {\n      cities = JSON.parse(savedCity);\n      this.setState({\n        cities\n      })\n    }\n  }\n  //zapis miast z listy do local storage\n  setLocalStorage = () => {\n    if (this.state.cities.length)\n      localStorage.setItem(\"storageCity\", JSON.stringify(this.state.cities));\n  };\n\n  //obsluga nazwy  miasta otrzymanego z formularza. sprawdzenie czy miasto juz istnieje na liscie\n  handleAddCity = (city) => {\n    let cities = this.state.cities;\n    let cityExist = cities.filter(item => item === city);\n\n    if (cityExist.length) {\n      console.log(\"Miasto znajduje się już na liście\");\n      alert(\"Miasto znajduje się już na liście\");\n    }\n    else {\n      cities.push(city);\n      this.setState({\n        cities\n      })\n    }\n  }\n\n  //zamiana nazw miast w state z wpisanych przez uzytkownika na te otrzymane z Api  \n  rewriteArrayCities = () => {\n    let weather = this.state.weather;\n    let newCityName;\n    newCityName = weather.map(item => item.city.name);\n\n    this.setState({\n      cities: newCityName\n    })\n\n  }\n  //usuniecie wskazanego miast z listy \n  handleRemoveCity = (id) => {\n    let weather = this.state.weather;\n    let cities = this.state.cities;\n    let cityName;\n    cityName = weather.filter(item => item.city.id === id);\n    weather = weather.filter(item => item.city.id !== id);\n    cities = cities.filter(item => item !== cityName[0].city.name)\n\n    this.setState({\n      weather,\n      cities\n    })\n  }\n  //osbluga seetings - jednostki temperatury i sprawdzenie czy nastapila zmiana - ustawienie flagi w celu wywolania renderignu componentDidUpdate\n  handleDeg = (deg) => {\n    if (deg === this.state.deg) {\n      this.setState({\n        degFlag: false\n      })\n    } else {\n      this.setState({\n        degFlag: true\n      })\n    }\n\n    if (deg === \"metric\") {\n      this.setState({\n        deg: \"metric\",\n      })\n\n    }\n    else if (deg === \"imperial\") {\n      this.setState({\n        deg: \"imperial\",\n      })\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"container\">\n        <div className=\"settings\">\n          <Link to=\"/settings\">Ustawienia</Link>\n        </div>\n        <Route path=\"/settings/\" component={() => <Settings handleDeg={this.handleDeg} deg={this.state.deg} changeDeg={this.state.changeDeg} />} />\n        <Route exact path=\"/\" component={() => (<div className=\"list\"><Form handleAddCity={this.handleAddCity} /> <List weather={this.state.weather} handleRemoveCity={this.handleRemoveCity} deg={this.state.deg} handleAvg={this.handleAvg} /></div>)} />\n        <Route path=\"/city/:id\" component={(props) => <Details weather={this.state.weather} tempAvg={this.tempAvg} deg={this.state.deg} {...props} />} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n\n    <BrowserRouter basename='/weather-app-create-react-app/'>\n        <App />\n    </BrowserRouter >,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}