{"version":3,"sources":["form/form.js","list/list.js","settings/settings.js","details/details.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","inputValue","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","handleAddCity","console","log","alert","react_default","a","createElement","className","onSubmit","this","type","onChange","placeholder","Component","List","temp","data","temps","tempAvg","weather","length","map","item","index","key","city","id","react_router_dom","to","concat","name","list","forEach","push","main","x","i","arr","reduce","b","toFixed","deg","onClick","handleRemoveCity","handleAvg","Fragment","Settings","selectedOption","radioChange","currentTarget","handleDeg","checked","Details","filter","match","params","class","coord","lat","lon","App","cities","degFlag","error","getLocalStorage","savedCity","localStorage","getItem","JSON","parse","setLocalStorage","setItem","stringify","cityExist","rewriteArrayCities","newCityName","cityName","_this2","_this$state","Promise","all","fetch","then","response","ok","json","Error","catch","_this3","react_router","path","component","settings_settings","changeDeg","exact","src_form_form","list_list","details_details","Object","assign","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","basename","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4d6317d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './form.css';\r\n\r\n\r\nclass Form extends Component {\r\n\r\n    state = {\r\n        inputValue: '',\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ inputValue: e.target.value });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.inputValue) {\r\n            this.props.handleAddCity(this.state.inputValue);\r\n        } else {\r\n            console.log(\"Podaj nazwę miasta\");\r\n            alert(\"Podaj nazwę miasta\");\r\n        }\r\n\r\n        this.setState({ inputValue: '' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder=\"Nazwa miasta...\" />\r\n                    <input type=\"submit\" value=\"Dodaj\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form\r\n\r\n\r\n\r\n/* const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n}\r\n\r\n\r\nconst Form = (props) => {\r\n\r\n    console.log(props);\r\n\r\n    return (\r\n        <div className=\"form\" >\r\n            <form onSubmit={(e) => handleSubmit(e)}>\r\n                <input type=\"text\" className=\"city\" placeholder=\"Nazwa miasta...\" onChange={(e) => props.handleAddCity(e.target.value)} />\r\n                <button className=\"addcity\">Dodaj</button>\r\n            </form>\r\n        </div >\r\n    )\r\n}\r\nexport default Form */\r\n\r\n\r\n// props.handleAddCity(e.target.value)","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './list.css';\r\n\r\nclass List extends Component {\r\n\r\n    // console.log(\"Propsy w List: \", props.weather);\r\n\r\n    render() {\r\n        let data = [];\r\n        let temps = [];\r\n        let temp;\r\n        let tempAvg = [];\r\n\r\n        if (this.props.weather.length) {\r\n            data = this.props.weather.map((item, index) => (\r\n                <div className=\"cityList\" key={item.city.id}>\r\n                    <div>{index}</div>\r\n                    <div className=\"cityLink\">\r\n                        <Link to={`/city/${item.city.id}`}>\r\n                            {item.city.name}\r\n                        </Link>\r\n                    </div>\r\n                    {item.list.forEach(item => temps.push(item.main.temp))}\r\n                    {/* {console.log(temps)} */}\r\n                    <div>\r\n                        {temp = (temps.map((x, i, arr) => x / arr.length).reduce((a, b) => a + b)).toFixed(1)}\r\n                        {tempAvg.push({ \"id\": item.city.id, \"temp\": temp })}\r\n                        {this.props.deg === 'metric' ? ' \\u00B0C' : ' \\u00B0F'}\r\n                    </div>\r\n                    <div><button onClick={() => this.props.handleRemoveCity(item.city.id)}>Usuń</button></div>\r\n                    <div>{temps.length = 0}</div>\r\n\r\n                </div>\r\n            ))\r\n        };\r\n        this.props.handleAvg(tempAvg);\r\n        return (\r\n            <>\r\n                <div className=\"cityListHeader\">\r\n                    <div>#</div>\r\n                    <div>Miasto</div>\r\n                    <div>Średnia prognozowana temperatura</div>\r\n                    <div></div>\r\n                </div>\r\n                {data}\r\n            </>\r\n\r\n\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './settings.css';\r\n\r\nclass Settings extends Component {\r\n\r\n    state = {\r\n        selectedOption: this.props.deg\r\n    }\r\n\r\n\r\n    radioChange = (e) => {\r\n        this.setState({\r\n            selectedOption: e.currentTarget.value\r\n        });\r\n        this.props.handleDeg(e.currentTarget.value)\r\n\r\n        console.log(this.props.deg, \"===\", e.currentTarget.value)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"set\">\r\n                <div className=\"setName\">Ustawienia</div>\r\n                <div className=\"radioButtonContainer\">\r\n                    <div>Jednostka:</div>\r\n                    <div>\r\n                        <label>\r\n                            <input type=\"radio\"\r\n                                value=\"metric\"\r\n                                checked={this.state.selectedOption === \"metric\"}\r\n                                onChange={this.radioChange} />\r\n                            &#176;C\r\n                    </label>\r\n\r\n                        <label>\r\n                            <input type=\"radio\"\r\n                                value=\"imperial\"\r\n                                checked={this.state.selectedOption === \"imperial\"}\r\n                                onChange={this.radioChange} />\r\n                            &#176;F\r\n                    </label>\r\n                    </div>\r\n                </div>\r\n                {/* <h3>{this.state.selectedOption}</h3> */}\r\n                <div className=\"back\">\r\n                    <Link to=\"/\">\r\n                        Powrót\r\n                </Link>\r\n                </div>\r\n\r\n                {/* </form> */}\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './details.css';\r\n\r\nclass Details extends Component {\r\n\r\n    render() {\r\n        let city;\r\n        let temp;\r\n\r\n        if (this.props.weather) {\r\n            city = this.props.weather.filter(item => item.city.id == this.props.match.params.id);\r\n            temp = this.props.tempAvg.filter(item => item.id == this.props.match.params.id);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div class=\"cityName\">\r\n                    {city[0].city.name}\r\n                </div>\r\n                <div className=\"detailsContainer\">\r\n                    <div>\r\n                        <div>\r\n                            szerokość geograficzna:\r\n                        </div>\r\n                        <div>\r\n                            {city[0].city.coord.lat}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            długość geograficzna:\r\n                        </div>\r\n                        <div>\r\n                            {city[0].city.coord.lon}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            średnia temperatura\r\n                        </div>\r\n                        <div>\r\n                            {temp[0].temp}\r\n                            {this.props.deg === 'metric' ? ' \\u00B0C' : ' \\u00B0F'}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"back\">\r\n                    <Link to=\"/\">\r\n                        Powrót\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Details","import React, { Component } from 'react';\nimport Form from './form/form';\nimport List from './list/list';\nimport Settings from './settings/settings'\nimport Details from './details/details';\nimport { Route, Link } from 'react-router-dom'\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    weather: [],\n    cities: [],\n    deg: \"metric\",\n    degFlag: false,\n  }\n\n  tempAvg = [];\n  error = false;\n\n  componentDidMount() {\n    this.getLocalStorage();\n  }\n\n  componentDidUpdate() {\n\n    const { weather, cities } = this.state;\n\n    if ((cities.length > weather.length) || this.state.degFlag) {\n\n      Promise.all(this.state.cities.map(city =>\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city},PL&units=${this.state.deg}&APPID=96993feca341f53ea0847433eae53af5`)\n          .then(response => {\n            if (response.ok) {\n              console.log(response.ok);\n              return response.json();\n            }\n            else\n              throw new Error('Podałeś złą nazwę miasta lub nie mogę się połączyć z API !!!!!!!!!!!!!');\n          })\n      ))\n        .then(weather => {\n          this.setState({\n            weather,\n            degFlag: false\n          }, () => {\n            console.log(\"jestem w update\")\n            this.rewriteArrayCities();\n            this.setLocalStorage();\n          })\n        })\n        .catch((error) => {\n          console.log(error);\n          return 0;\n          // alert(error);\n        });\n\n\n    }\n  }\n\n  handleAvg = (tempAvg) => {\n    console.log(\"Wywołanie handle AVG !!!\")\n    this.tempAvg = tempAvg;\n    console.log(this.tempAvg);\n  }\n\n  getLocalStorage = () => {\n    //pobieram nazwy miast z LocalStorage\n    let savedCity = localStorage.getItem(\"storageCity\");\n    let cities;\n\n    //jeżeli są zapisane miasta, to pobieram dane z Api\n    if (savedCity) {\n      cities = JSON.parse(savedCity);\n      console.log(savedCity);\n      this.setState({\n        cities\n      })\n    }\n  }\n\n  setLocalStorage = () => {\n    console.log(\"ZAPIS do local storage uruchamiany\")\n    if (this.state.cities.length)\n      localStorage.setItem(\"storageCity\", JSON.stringify(this.state.cities));\n  };\n\n\n  handleAddCity = (city) => {\n    console.log(\"Wywołanie handleAddCity\");\n    let cities = this.state.cities;\n\n    let cityExist = cities.filter(item => item === city);\n    console.log(cityExist);\n\n    if (cityExist.length) {\n      console.log(\"Miasto znajduje się już na liście\");\n      alert(\"Miasto znajduje się już na liście\");\n    }\n    else {\n      cities.push(city);\n      this.setState({\n        cities\n      })\n    }\n\n  }\n\n  rewriteArrayCities = () => {\n    console.log(\"rewriteArrayCities\");\n\n    let weather = this.state.weather;\n    let newCityName;\n    newCityName = weather.map(item => item.city.name);\n\n    console.log(newCityName);\n    this.setState({\n      cities: newCityName\n    })\n\n  }\n\n  handleRemoveCity = (id) => {\n\n    let weather = this.state.weather;\n    let cities = this.state.cities;\n    let cityName;\n    cityName = weather.filter(item => item.city.id === id);\n    weather = weather.filter(item => item.city.id !== id);\n    console.log(cityName[0].city.name);\n    cities = cities.filter(item => item !== cityName[0].city.name)\n    console.log(cities)\n\n    this.setState({\n      weather,\n      cities\n    })\n  }\n\n  handleDeg = (deg) => {\n    console.log(\"handleDeg:\", deg);\n\n    if (deg === this.state.deg) {\n      this.setState({\n        degFlag: false\n      })\n    } else {\n      this.setState({\n        degFlag: true\n      })\n    }\n\n\n    if (deg === \"metric\") {\n      this.setState({\n        deg: \"metric\",\n      })\n\n    }\n    else if (deg === \"imperial\") {\n      this.setState({\n        deg: \"imperial\",\n      })\n    }\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"container\">\n        <div className=\"settings\">\n          <Link to=\"/settings\">Ustawienia</Link>\n        </div>\n\n\n        <Route path=\"/settings/\" component={(props) => <Settings handleDeg={this.handleDeg} deg={this.state.deg} changeDeg={this.state.changeDeg} />} />\n        <Route exact path=\"/\" component={(props) => (<div className=\"list\"><Form handleAddCity={this.handleAddCity} /> <List weather={this.state.weather} handleRemoveCity={this.handleRemoveCity} deg={this.state.deg} handleAvg={this.handleAvg} /></div>)} />\n        <Route path=\"/city/:id\" component={(props) => <Details weather={this.state.weather} tempAvg={this.tempAvg} deg={this.state.deg} {...props} />} />\n\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n\n    <BrowserRouter basename='/weather-app-create-react-app/'>\n        <App />\n    </BrowserRouter >,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}